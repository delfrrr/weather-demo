== BEMHTML

BEMHTML — это технология, позволяющая написать шаблоны,
преобразующие BEMJSON (JSON, описывающий конкретные сочетания БЭМ-блоков) в HTML,
необходимый для правильной работы CSS и JavaScript, написанных в БЭМ-терминах.

BEMHTML-шаблоны компилируются в JavaScript-функцию,
которая принимает на вход JSON специального вида (BEMJSON) и возвращает строку, содержащую HTML.

=== BEMJSON

Формат BEMJSON состоит из конструкций трёх типов:
  * обычные строки и числа, для записи простых значений или вставок HTML-фрагментов напрямую (читай хаков)
  * БЭМ-объекты (блок или элемент)
  * массивы строк/чисел и БЭМ-объектов

БЭМ-объект — это обычный JS-объект, все поля которого опциональны (т.е. для всех есть какой-то дефолт).
Следующие поля имеют особый смысл:
  * block — имя блока ##{String}##
  * elem — имя элемента ##{String}##
  * mods — модификаторы блока ##{Object}##
  * elemMods — модификаторы элемента ##{Object}##
  * mix — подмешанные блоки и/или элементы ##{Array}##
  * tag — результирующий HTML-тег ##{String}##
  * attrs — результирующие HTML-атрибуты ##{Object}##
  * cls — добавка к HTML-атрибуту class, помимо автоматических БЭМ-классов ##{String}##
  * js — параметры для браузерного JS или просто флаг про его наличие
    (нужен для стыковки JS-кода, написанного с использованием ##i-bem_~_dom.js##) ##{Boolean|Object}##
  * bem — флаг для отмены генерации БЭМ-классов в результирующем HTML ##{Boolean}##
  * content — содержимое объекта ##{BEMJSON}##

=== Шаблоны

Синтаксис BEMHTML-файлов описывает набор шаблонов. Каждый шаблон состоит из двух основных частей,
разделённых двоеточием: предикат и тело.
Предикат — это один и более подпредикатов, разделённых запятыми. Тело — это js-выражение или js-блок.
Подпредикаты могут быть трёх типов:
  * про БЭМ
    * block //имя блока// — ##true##, если имя текущего блока совпадает с //имя блока//,
      где //имя блока// — это последовательность символов,
      допустимых в имени блока, ##[a-z0-9-]## (без кавычек)
      или js-выражение, которое будет приведено к ##{String}##
    * elem //имя элемента// — подпредикат на элемент, полностью аналогичный с подпредикатом на блок
    * mod //имя модификатора// //значение модификатора// — ##true##, если текущий блок имеет //имя модификатора//
      в значении //значение модификатора//, где имя и значение могут быть простой последовательностью символов
      или js-выражением
    * elemMod //имя модификатора// //значение модификатора// — подпредикат на элемент, полностью аналогичный подпредикату на блок
  * про установку разных свойств результирующего HTML (все значения симметричны полям в BEMJSON)
    * tag — результирующий HTML-тег, переопределяющий заданный в BEMJSON ##{String}##
    * attrs — результирующие HTML-атрибуты, расширяющие заданные в BEMJSON ##{Object}##
    * cls — добавка к HTML-атрибуту class, переопределяющая заданное в BEMJSON ##{String}##
    * js — параметры для браузерного JS, расширяющие заданные в BEMJSON ##{Boolean|Object}##
    * bem — флаг для отмены генерации БЭМ-классов в результирующем HTML, переопределяющий заданный в BEMJSON ##{Boolean}##
    * mix — подмешанные блоки и/или элементы, дополняющие заданные в BEMJSON ##{Array}##
    * content — содержимое объекта, переопределяющее заданное в BEMJSON ##{BEMJSON}##
  * произвольные подпредикаты, являющиеся js-выражением

В случае, когда несколько шаблонов имеют повторяющиеся общие части в предикатах (например, несколько шаблонов про один блок),
можно вынести повторения за фигурные скобки.

В общих словах, процесс исполнения шаблонов очень похож на XSL-преобразование.
Базовые шаблоны, описанные в ##i-bem__html.bemhtml##, обеспечивают итерацию по входному БЭМ-дереву.
Для каждого узла находится последний в списке (или первый с конца) шаблон,
все подпредикаты которого приводятся к ##Boolean## как ##true## и его тело исполняется.

Вычислении предиката и тела каждого из шаблонов происходит в js-контексте,
доступном через стандартную переменную ##this##. В контексте определены следующие поля:
  * block -- имя блока ##{String}##
  * elem -- имя элемента ##{String}##
  * mods -- модификаторы блока ##{Object}##
  * elemMods -- модификаторы элемента ##{Object}##
  * isFirst -- первый ли в последовательности БЭМ-объектов ##{{Function}}##
  * isLast -- последний ли в последовательности БЭМ-объектов ##{{Function}}##
  * position -- позиция в последовательности БЭМ-объектов ##{{Number}}##
  * ctx -- фрагмент входного дерева для текущего контекста ##{Object}##

=== Примеры

Примеры BEMHTML-шаблонов можно найти в ##lego/blocks*/## в ##*.bemhtml##.
Примеры BEMJSON можно найти в ##lego/blocks*/*/examples/*.bemjson.js##.

=== Некоторые факты

Эти факты про всякие низкоуровневые и/или пока не доделанные вещи.
Без них запросто можно обойтись в подавляющем большинстве случаев.

  * BEMHTML является надмножеством ((https://github.com/veged/xjst/ XJST)) и сначала компилируется в него,
    а уже он компилируется в JavaScript.
  * В телах шаблонов можно использовать XJST-конструкцию ##local## и вызов ##this.apply()##.
  * Подпредикаты про БЭМ — это синтаксический сахар над такими js-подпредикатами:
    * ##block b-myblock## → ##this.block === 'b-myblock'##
    * ##elem myelem## → ##this.elem === 'myelem'##
    * ##mod myblockmod myblockval## → ##this.mods.myblockmod === 'myblockval'##
    * ##elemMod myelemmod myelemval## → ##this.elemMods.myelemmod === 'myelemval'##
  * Подпредикаты про установку разных свойств результирующего HTML — это синтаксический сахар над такими js-подпредикатами:
    * ##tag## → ##this._mode === 'tag'##
    * ##attrs## → ##this._mode === 'attrs'##
    * и т.д. аналогично для остальных
  * Среди подпредикатов про установку разных свойств результирующего HTML есть подпредикат ##default##,
    позволяющий выполнить полностью произвольные действия при обработке БЭМ-объекта.
