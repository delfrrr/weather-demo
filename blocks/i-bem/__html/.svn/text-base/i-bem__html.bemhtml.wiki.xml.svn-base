<div class="shmakowiki"><h1>BEMHTML</h1><p>BEMHTML – это технология позволяющая написать шаблоны, преобразующие BEMJSON (JSON описывающий конкретные сочетания БЭМ-блоков) в HTML, необходимый для правильной работы CSS и JavaScript написанных в БЭМ-терминах.</p><p>BEMHTML-шаблоны компилируются в JavaScript-функцию, которая принимает на вход JSON специального вида (BEMJSON) и возвращает строку, содержащую HTML.</p><h2>BEMJSON</h2><p>Формат BEMJSON состоит из конструкций трёх типов:</p><ul><li>обычные строки и числа, для записи простых значений или вставок HTML-фрагментов на прямую (читай хаков)</li><li>БЭМ-объекты (блок или элемент)</li><li>массивы строк/чисел и БЭМ-объектов</li></ul><p>БЭМ-объект, это обычный JS-объект, все поля которого опциональны (т.е. для всех есть какой-то дефолт). Следующие поля имеют особый смысл:</p><ul><li>block – имя блока <tt>{String}</tt></li><li>elem – имя элемента <tt>{String}</tt></li><li>mods – модификаторы блока <tt>{Object}</tt></li><li>elemMods – модификаторы элемента <tt>{Object}</tt></li><li>mix – подмешанные блоки и/или элементы <tt>{Array}</tt></li><li>tag – результирующий HTML-тег <tt>{String}</tt></li><li>attrs – результирующие HTML-атрибуты <tt>{Object}</tt></li><li>cls – добавка к HTML-атрибуту class, помимо автоматических БЭМ-классов <tt>{String}</tt></li><li>js – параметры для браузерного JS или просто флаг про его наличие
    (нужен для стыковки JS-кода написанного с использованием <tt>i-bem<u>dom.js</u></tt>) <tt>{Boolean|Object}</tt></li><li>bem – флаг, для отмены генерации БЭМ-классов в результирующем HTML <tt>{Boolean}</tt></li><li>content – содержимое объекта <tt>{BEMJSON}</tt></li></ul><h2>Шаблоны</h2><p>Синтаксис BEMHTML-файлов описывает набор шаблонов. Каждый шаблон состоит из двух основных частей, разделённых двоеточием: предикат и тело. Предикат, это один и более подпредикатов, разделённых запятыми. Тело, это js-выражение или js-блок. Подпредикаты могут быть трёх типов:</p><ul><li>про БЭМ<ul><li>block <i>имя блока</i> – <tt>true</tt> если имя текущего блока совпадает с <i>имя блока</i>,
      где <i>имя блока</i>, это последовательность символов,
      допустимых в имени блока, <tt>[a-z0-9-]</tt> (без ковычек)
      или js-выражение, которое будет приведено к <tt>{String}</tt></li><li>elem <i>имя элемента</i> – подпредикат на элемент, полностью аналогичный с подпредикатом на блок</li><li>mod <i>имя модификатора</i> <i>значение модификатора</i> – <tt>true</tt> если текущий блок имеет <i>имя модификатора</i>
      в значении <i>значение модификатора</i>, где имя и значение могут быть простой последовательностью символов
      или js-выражением</li><li>elemMod <i>имя модификатора</i> <i>значение модификатора</i> – подпредикат на элемент, полностью аналогичный с подпредикатом на блок</li></ul></li><li>про установку разных свойств результирующего HTML (все значения симметричны полям в BEMJSON)<ul><li>tag – результирующий HTML-тег, переопределяющий заданный в BEMJSON <tt>{String}</tt></li><li>attrs – результирующие HTML-атрибуты, расширяющие заданные в BEMJSON <tt>{Object}</tt></li><li>cls – добавка к HTML-атрибуту class, переопределяющая заданное в BEMJSON <tt>{String}</tt></li><li>js – параметры для браузерного JS, расширяющие заданные в BEMJSON <tt>{Boolean|Object}</tt></li><li>bem – флаг, для отмены генерации БЭМ-классов в результирующем HTML, переопределяющий заданный в BEMJSON <tt>{Boolean}</tt></li><li>mix – подмешанные блоки и/или элементы, дополняющие заданные в BEMJSON <tt>{Array}</tt></li><li>content – содержимое объекта, переопределяющее заданное в BEMJSON <tt>{BEMJSON}</tt></li></ul></li><li>произвольные подпредикаты, являющиеся js-выражением</li></ul><p>В случае, когда несколько шаблонов имеют повторяющиеся общие части в предикатах (например несколько шаблонов про один блок), можно вынести повторения за фигурные скобки.</p><p>В общих словах, процесс исполнения шаблонов очень похож на XSL-преобразование. Базовые шаблоны, описанные в <tt>i-bem<u>html.bemhtml</u></tt>, обеспечивают итерацию по входному БЭМ-дереву. Для каждого узла находится последний в списке (или первый с конца) шаблон, все подпредикаты которого приводятся к <tt>Boolean</tt> как <tt>true</tt> и его тело исполняется.</p><p>Вычислении предиката и тела каждого из шаблонов происходит в js-контексте, доступном через стандартную переменную <tt>this</tt>. В контексте определены следующие поля:</p><ul><li>block – имя блока <tt>{String}</tt></li><li>elem – имя элемента <tt>{String}</tt></li><li>mods – модификаторы блока <tt>{Object}</tt></li><li>elemMods – модификаторы элемента <tt>{Object}</tt></li><li>ctx – фрагмент входного дерева для текущего контекста <tt>{Object}</tt></li></ul><h2>Примеры</h2><p>Примеры BEMHTML-шаблонов можно найти в <tt>lego/blocks*/</tt> в <tt>*.bemhtml</tt>. Примеры BEMJSON можно найти в <tt>lego/blocks*/*/examples/*.bemjson.js</tt>.</p><h2>Некоторые факты</h2><p>Эти факты про всякие низкоуровневые и/или не доделанные пока что вещи. Без них запросто можно обойтись в подавляющем большинстве случаев.</p><ul><li>BEMHTML является надмножеством <a href="https://github.com/veged/xjst/">XJST</a> и с начала компилируется в него,
    а уже он компилируется в JavaScript.</li><li>В телах шаблонов можно использовать XJST-конструкцию <tt>local</tt> и вызов <tt>this.apply()</tt>.</li><li>Подпредикаты про БЭМ, это синтаксический сахар над такими js-подпредикатами:<ul><li><tt>block b-myblock</tt> → <tt>this.block === &apos;b-myblock&apos;</tt></li><li><tt>elem myelem</tt> → <tt>this.elem === &apos;myelem&apos;</tt></li><li><tt>mod myblockmod myblockval</tt> → <tt>this.mods.myblockmod === &apos;myblockval&apos;</tt></li><li><tt>elemMod myelemmod myelemval</tt> → <tt>this.elemMods.myelemmod === &apos;myelemval&apos;</tt></li></ul></li><li>Подпредикаты про установку разных свойств результирующего HTML, это синтаксический сахар над такими js-подпредикатами:<ul><li><tt>tag</tt> → <tt>this._mode === &apos;tag&apos;</tt></li><li><tt>attrs</tt> → <tt>this._mode === &apos;attrs&apos;</tt></li><li>и т.д. аналогично для остальных</li></ul></li><li>Среди подпредикатов про установку разных свойств результирующего HTML есть подпредикат <tt>default</tt>,
    позволяющий выполнить полностью произвольные действия при обработке БЭМ-объекта.</li></ul></div>
